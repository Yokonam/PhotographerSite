@use "sass:math";
@use '../variables' as v;
@use 'breakpoints' as bp;


@mixin make-container($gutter: v.$grid-gutter-width) {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include bp.media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row($gutter: v.$grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-right: math.div(-$gutter, 2);
  margin-left: math.div(-$gutter, 2);
  margin-bottom: -$gutter;
  @include bp.media-breakpoint-down(sm) {
    margin-right: -#{math.div(v.$grid-gutter-width-sp, 2)};
    margin-left: -#{math.div(v.$grid-gutter-width-sp, 2)};
    margin-bottom: -#{v.$grid-gutter-width-sp};
  }

}

@mixin make-col-ready($gutter: v.$grid-gutter-width) {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  padding-right: math.div($gutter,  2);
  padding-left: math.div($gutter,  2);
  padding-bottom: $gutter;
  @include bp.media-breakpoint-down(sm) {
    padding-right: math.div(v.$grid-gutter-width-sp,  2);
    padding-left: math.div(v.$grid-gutter-width-sp,  2);
    padding-bottom: $gutter-width-sp ;
  }
}

@mixin make-col($size, $columns: v.$grid-columns) {
  flex: 0 0 math.div($size, $columns) * 100%;
  max-width: math.div($size, $columns) * 100%;
}

@mixin make-col-offset($size, $columns: v.$grid-columns) {
  $num: math.div($size, $columns);
  margin-left: if($num == 0, 0, percentage($num));
}

@mixin make-grid-columns($columns: v.$grid-columns, $gutter: v.$grid-gutter-width, $breakpoints: v.$grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    padding-right: math.div($gutter, 2);
    padding-left: math.div($gutter, 2);
    padding-bottom: $gutter;
    @include bp.media-breakpoint-down(sm) {
      padding-right: math.div(v.$grid-gutter-width-sp, 2);
      padding-left: math.div(v.$grid-gutter-width-sp, 2);
      padding-bottom: v.$grid-gutter-width-sp;
    }
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: bp.breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }
    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }

    @include bp.media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;

      }
      .col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: 100%; // Reset earlier grid tiers
      }

      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      .order#{$infix}-first { order: -1; }

      .order#{$infix}-last { order: $columns + 1; }

      @for $i from 0 through $columns {
        .order#{$infix}-#{$i} { order: $i; }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
          .offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }

  @media print {
    @for $i from 1 through $columns {
      .col-md-#{$i} {
        @include make-col($i, $columns);
      }
    }
  }
}

